

DJANGO COMMANDS

have a pip file
pipenv shell
pip freeze --> list sout all the packages/libraries in the project
pipenv install <module>


using virtual environment
pip install pipenv
pipenv shell

pipenv install django
django-admin startproject <project_name>
python manage.py startapp <app_name>
python manage.py makemigrations
python manage.py migrate

*****************************************************************
to create username and password for admin pannel
python manage.py createsuperuser
enter username:
provide email:
provide password:
again password:
click y
*******************************************************************
cors -> cross origin request site 
-> this is required when  we send multiple requests from different
   resources(e.g: requests from postman and react ect)
pip install django-cors-headers --> if not in virtual environment
pipenv install django-cors-headers --> if in virtual environment
-> now add this in the settings file of project
	INSTALLED_APPS = [
    			   ...,
    			   "corsheaders",
 			   ...,
			 ]

	MIDDLEWARE = [
   			 ...,
    		       "corsheaders.middleware.CorsMiddleware",
   		       "django.middleware.common.CommonMiddleware",
    			...,
		     ]

	In the settings file go to bottom and add 
	-> CORS_ORIGIN_ALLOW_ALL = True
	-> make ALLOWED_HOSTS = ['*'] 
*******************************************************************

MIDDLEWARE:
if a browser or something is making a request to your web applicatoin
befor the request hits the web applicatoin - something to happen
in between that is taken care by this 
-> eg, only allow the request to hit if they user is authenticated
********************************************************************
INSTALLATION OF DJANGO_REST_FRAMEWORK
To work with api's in a better way

pip install djangorestframework -> if no virtual environment
pipenv install djangorestframework -> if in virtual environment

In the settings.py file of the app folder :
	INSTALLED_APPS = [
 			   ...
			   'rest_framework',
			   "rest_framework.authtoken", 
			   (authtoken is for custom signup not 
				uisng django signup)
			 ]
	
	urlpatterns = [
    			...
    		path('api-auth/', include('rest_framework.urls'))
		      ]
	Paste this in settins.py file
	REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication'
    ],
    'DEFAULT_PERMISSION_CLASSES': [
    'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
    			]
			}

********************************************************************
STORING IMAGES IN DJANGO

create a folder of any name eg: media in the file directory of 
ecom(main)
go to settings.py and add
import os
MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

go to urls.py
from django.conf.urls.static import static
from django.conf import settings
urlpatterns += static(settings.MEDIA_URL, 
		document_root = settings.MEDIA_ROOT)
This is how we add static files and image, vedios in the django
********************************************************************
CUSTOM SIGN-IN AND SIGN-OUT
THIS IS THE DESCRIPTION FOR THE USERS VIEWS.PY (AUTHENTICATION ONE)
@csrf_exmpt -> as we are sign in from other origin request
signin()-> method which is custom design
     ->	if the method is not post we just say hey! this is not a 
	post request and only post request are accepted in this 
	route
     ->	extracted the username and password from the post method
     ->	we did a validation part for the username and password 
	from regex
     ->	then we tried to grab usermodel which is imported from
	django.contib.auth
     ->	then we used exception handling by using try and catch
	we simply created a user which is grabbed from usermodel
	 and it tries to grab the model based on email
	then we use a method check_password which is given by 
	django now this is going to be enter only the password is
	mattching up there
	and we try to grab a username and pop up so that this does 
	not interrupts the frontend
	then we are checking that the session token is there or not
	if session token != 0 this is default value that means
	the session is running then we are making it 0 so that next 
	time when he logged in he has to be logged in
	then we use a token generated by our custom method
	 (generate_session_token)
	we access a property which is session_token fill it and 
	save the user. then we use default method of django to login
	where we provide request and user then in the jsonresponse
	we are throughing token and user to frontend password is 
	already poped off so no worry
********************************************************************
when creating a custom login and logout we face some issue in the 
createsuperuser so first do the migrations and go the migrations 
folder of api(as of this project) create a file named 0001_initial.py
first delete the sqllite database file and create a custom db as in
code
from django.db import migrations
from api.user.models import CustomUser
class Migration(migrations.Migration):
    def seed_data(apps, schema_editor):
        user = CustomUser(name="preetham", email="indunani27@gmail.com", is_staff=True, is_superuser=True,
        phone="9989769830",gender='Male')

        user.set_password("12345")
        user.save()

    dependencies = [ ]
    operations = [
            migrations.RunPython(seed_data),
        ]
then make migrations and migrate then runserver
*********************************************************************
POST request for login and signup
GET request for logout
*********************************************************************
BRAIN TREE PAYMENT GATEWAY
vist developers.braintree.com
there are 2 different accounts given 
	1-> sandox account which we need
	2-> production grade account
only change in these is key value change (secret key)
1> client sends request to server
2> server gives a response as a token (weather ready to do payment)
3> once it recieves it braintree comes it generates a nonce from 
   braintree server(this is happen at frontend). As soon as frontend 
   recieves a nonce it takes all the payment along with nonce it 
   sends it to server(our)
4> Take that nonce along with the payment
   (nonce is like a collection that like yes i was able to contact 
   braintree as well as this is the perticular amount that you want
   to charge)
   Our server sends this request of accepting the payment to this 
   braintree server
5> Braintree server sends back msg that everything gone good or 
   anything happend in between


pipenv install braintree or pip install braintree